/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// @ts-nocheck
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var netmap_types_pb = require('../netmap/types_pb.js');
goog.object.extend(proto, netmap_types_pb);
var refs_types_pb = require('../refs/types_pb.js');
goog.object.extend(proto, refs_types_pb);
var session_types_pb = require('../session/types_pb.js');
goog.object.extend(proto, session_types_pb);
goog.exportSymbol('proto.neo.fs.v2.netmap.LocalNodeInfoRequest', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.LocalNodeInfoResponse', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NetworkInfoRequest', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NetworkInfoRequest.Body', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NetworkInfoResponse', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NetworkInfoResponse.Body', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.LocalNodeInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.LocalNodeInfoRequest.displayName = 'proto.neo.fs.v2.netmap.LocalNodeInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.displayName = 'proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.LocalNodeInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.LocalNodeInfoResponse.displayName = 'proto.neo.fs.v2.netmap.LocalNodeInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.displayName = 'proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NetworkInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NetworkInfoRequest.displayName = 'proto.neo.fs.v2.netmap.NetworkInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NetworkInfoRequest.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.displayName = 'proto.neo.fs.v2.netmap.NetworkInfoRequest.Body';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NetworkInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NetworkInfoResponse.displayName = 'proto.neo.fs.v2.netmap.NetworkInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NetworkInfoResponse.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.displayName = 'proto.neo.fs.v2.netmap.NetworkInfoResponse.Body';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.LocalNodeInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.toObject(includeInstance, f),
    metaHeader: (f = msg.getMetaHeader()) && session_types_pb.RequestMetaHeader.toObject(includeInstance, f),
    verifyHeader: (f = msg.getVerifyHeader()) && session_types_pb.RequestVerificationHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.LocalNodeInfoRequest;
  return proto.neo.fs.v2.netmap.LocalNodeInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body;
      reader.readMessage(value,proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = new session_types_pb.RequestMetaHeader;
      reader.readMessage(value,session_types_pb.RequestMetaHeader.deserializeBinaryFromReader);
      msg.setMetaHeader(value);
      break;
    case 3:
      var value = new session_types_pb.RequestVerificationHeader;
      reader.readMessage(value,session_types_pb.RequestVerificationHeader.deserializeBinaryFromReader);
      msg.setVerifyHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.LocalNodeInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.serializeBinaryToWriter
    );
  }
  f = message.getMetaHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      session_types_pb.RequestMetaHeader.serializeBinaryToWriter
    );
  }
  f = message.getVerifyHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      session_types_pb.RequestVerificationHeader.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body;
  return proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional Body body = 1;
 * @return {?proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.getBody = function() {
  return /** @type{?proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body, 1));
};


/** @param {?proto.neo.fs.v2.netmap.LocalNodeInfoRequest.Body|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.session.RequestMetaHeader meta_header = 2;
 * @return {?proto.neo.fs.v2.session.RequestMetaHeader}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.getMetaHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.RequestMetaHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.RequestMetaHeader, 2));
};


/** @param {?proto.neo.fs.v2.session.RequestMetaHeader|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.setMetaHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.clearMetaHeader = function() {
  this.setMetaHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.hasMetaHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.session.RequestVerificationHeader verify_header = 3;
 * @return {?proto.neo.fs.v2.session.RequestVerificationHeader}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.getVerifyHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.RequestVerificationHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.RequestVerificationHeader, 3));
};


/** @param {?proto.neo.fs.v2.session.RequestVerificationHeader|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.setVerifyHeader = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.clearVerifyHeader = function() {
  this.setVerifyHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoRequest.prototype.hasVerifyHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.LocalNodeInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.toObject(includeInstance, f),
    metaHeader: (f = msg.getMetaHeader()) && session_types_pb.ResponseMetaHeader.toObject(includeInstance, f),
    verifyHeader: (f = msg.getVerifyHeader()) && session_types_pb.ResponseVerificationHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.LocalNodeInfoResponse;
  return proto.neo.fs.v2.netmap.LocalNodeInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body;
      reader.readMessage(value,proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = new session_types_pb.ResponseMetaHeader;
      reader.readMessage(value,session_types_pb.ResponseMetaHeader.deserializeBinaryFromReader);
      msg.setMetaHeader(value);
      break;
    case 3:
      var value = new session_types_pb.ResponseVerificationHeader;
      reader.readMessage(value,session_types_pb.ResponseVerificationHeader.deserializeBinaryFromReader);
      msg.setVerifyHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.LocalNodeInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.serializeBinaryToWriter
    );
  }
  f = message.getMetaHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      session_types_pb.ResponseMetaHeader.serializeBinaryToWriter
    );
  }
  f = message.getVerifyHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      session_types_pb.ResponseVerificationHeader.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    nodeInfo: (f = msg.getNodeInfo()) && netmap_types_pb.NodeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body;
  return proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = new netmap_types_pb.NodeInfo;
      reader.readMessage(value,netmap_types_pb.NodeInfo.deserializeBinaryFromReader);
      msg.setNodeInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getNodeInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      netmap_types_pb.NodeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {?proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.getVersion = function() {
  return /** @type{?proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {?proto.neo.fs.v2.refs.Version|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeInfo node_info = 2;
 * @return {?proto.neo.fs.v2.netmap.NodeInfo}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.getNodeInfo = function() {
  return /** @type{?proto.neo.fs.v2.netmap.NodeInfo} */ (
    jspb.Message.getWrapperField(this, netmap_types_pb.NodeInfo, 2));
};


/** @param {?proto.neo.fs.v2.netmap.NodeInfo|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.setNodeInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.clearNodeInfo = function() {
  this.setNodeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body.prototype.hasNodeInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Body body = 1;
 * @return {?proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.getBody = function() {
  return /** @type{?proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body, 1));
};


/** @param {?proto.neo.fs.v2.netmap.LocalNodeInfoResponse.Body|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.session.ResponseMetaHeader meta_header = 2;
 * @return {?proto.neo.fs.v2.session.ResponseMetaHeader}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.getMetaHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.ResponseMetaHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.ResponseMetaHeader, 2));
};


/** @param {?proto.neo.fs.v2.session.ResponseMetaHeader|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.setMetaHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.clearMetaHeader = function() {
  this.setMetaHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.hasMetaHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.session.ResponseVerificationHeader verify_header = 3;
 * @return {?proto.neo.fs.v2.session.ResponseVerificationHeader}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.getVerifyHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.ResponseVerificationHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.ResponseVerificationHeader, 3));
};


/** @param {?proto.neo.fs.v2.session.ResponseVerificationHeader|undefined} value */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.setVerifyHeader = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.clearVerifyHeader = function() {
  this.setVerifyHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.LocalNodeInfoResponse.prototype.hasVerifyHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NetworkInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.toObject(includeInstance, f),
    metaHeader: (f = msg.getMetaHeader()) && session_types_pb.RequestMetaHeader.toObject(includeInstance, f),
    verifyHeader: (f = msg.getVerifyHeader()) && session_types_pb.RequestVerificationHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoRequest}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NetworkInfoRequest;
  return proto.neo.fs.v2.netmap.NetworkInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoRequest}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.netmap.NetworkInfoRequest.Body;
      reader.readMessage(value,proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = new session_types_pb.RequestMetaHeader;
      reader.readMessage(value,session_types_pb.RequestMetaHeader.deserializeBinaryFromReader);
      msg.setMetaHeader(value);
      break;
    case 3:
      var value = new session_types_pb.RequestVerificationHeader;
      reader.readMessage(value,session_types_pb.RequestVerificationHeader.deserializeBinaryFromReader);
      msg.setVerifyHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NetworkInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.serializeBinaryToWriter
    );
  }
  f = message.getMetaHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      session_types_pb.RequestMetaHeader.serializeBinaryToWriter
    );
  }
  f = message.getVerifyHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      session_types_pb.RequestVerificationHeader.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoRequest.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoRequest.Body}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NetworkInfoRequest.Body;
  return proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoRequest.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoRequest.Body}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoRequest.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional Body body = 1;
 * @return {?proto.neo.fs.v2.netmap.NetworkInfoRequest.Body}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.getBody = function() {
  return /** @type{?proto.neo.fs.v2.netmap.NetworkInfoRequest.Body} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.netmap.NetworkInfoRequest.Body, 1));
};


/** @param {?proto.neo.fs.v2.netmap.NetworkInfoRequest.Body|undefined} value */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.session.RequestMetaHeader meta_header = 2;
 * @return {?proto.neo.fs.v2.session.RequestMetaHeader}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.getMetaHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.RequestMetaHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.RequestMetaHeader, 2));
};


/** @param {?proto.neo.fs.v2.session.RequestMetaHeader|undefined} value */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.setMetaHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.clearMetaHeader = function() {
  this.setMetaHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.hasMetaHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.session.RequestVerificationHeader verify_header = 3;
 * @return {?proto.neo.fs.v2.session.RequestVerificationHeader}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.getVerifyHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.RequestVerificationHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.RequestVerificationHeader, 3));
};


/** @param {?proto.neo.fs.v2.session.RequestVerificationHeader|undefined} value */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.setVerifyHeader = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.clearVerifyHeader = function() {
  this.setVerifyHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfoRequest.prototype.hasVerifyHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NetworkInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.toObject(includeInstance, f),
    metaHeader: (f = msg.getMetaHeader()) && session_types_pb.ResponseMetaHeader.toObject(includeInstance, f),
    verifyHeader: (f = msg.getVerifyHeader()) && session_types_pb.ResponseVerificationHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoResponse}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NetworkInfoResponse;
  return proto.neo.fs.v2.netmap.NetworkInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoResponse}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.netmap.NetworkInfoResponse.Body;
      reader.readMessage(value,proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = new session_types_pb.ResponseMetaHeader;
      reader.readMessage(value,session_types_pb.ResponseMetaHeader.deserializeBinaryFromReader);
      msg.setMetaHeader(value);
      break;
    case 3:
      var value = new session_types_pb.ResponseVerificationHeader;
      reader.readMessage(value,session_types_pb.ResponseVerificationHeader.deserializeBinaryFromReader);
      msg.setVerifyHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NetworkInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.serializeBinaryToWriter
    );
  }
  f = message.getMetaHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      session_types_pb.ResponseMetaHeader.serializeBinaryToWriter
    );
  }
  f = message.getVerifyHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      session_types_pb.ResponseVerificationHeader.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoResponse.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkInfo: (f = msg.getNetworkInfo()) && netmap_types_pb.NetworkInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoResponse.Body}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NetworkInfoResponse.Body;
  return proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoResponse.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfoResponse.Body}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new netmap_types_pb.NetworkInfo;
      reader.readMessage(value,netmap_types_pb.NetworkInfo.deserializeBinaryFromReader);
      msg.setNetworkInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfoResponse.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      netmap_types_pb.NetworkInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional NetworkInfo network_info = 1;
 * @return {?proto.neo.fs.v2.netmap.NetworkInfo}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.prototype.getNetworkInfo = function() {
  return /** @type{?proto.neo.fs.v2.netmap.NetworkInfo} */ (
    jspb.Message.getWrapperField(this, netmap_types_pb.NetworkInfo, 1));
};


/** @param {?proto.neo.fs.v2.netmap.NetworkInfo|undefined} value */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.prototype.setNetworkInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.prototype.clearNetworkInfo = function() {
  this.setNetworkInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.Body.prototype.hasNetworkInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Body body = 1;
 * @return {?proto.neo.fs.v2.netmap.NetworkInfoResponse.Body}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.getBody = function() {
  return /** @type{?proto.neo.fs.v2.netmap.NetworkInfoResponse.Body} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.netmap.NetworkInfoResponse.Body, 1));
};


/** @param {?proto.neo.fs.v2.netmap.NetworkInfoResponse.Body|undefined} value */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.session.ResponseMetaHeader meta_header = 2;
 * @return {?proto.neo.fs.v2.session.ResponseMetaHeader}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.getMetaHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.ResponseMetaHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.ResponseMetaHeader, 2));
};


/** @param {?proto.neo.fs.v2.session.ResponseMetaHeader|undefined} value */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.setMetaHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.clearMetaHeader = function() {
  this.setMetaHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.hasMetaHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.session.ResponseVerificationHeader verify_header = 3;
 * @return {?proto.neo.fs.v2.session.ResponseVerificationHeader}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.getVerifyHeader = function() {
  return /** @type{?proto.neo.fs.v2.session.ResponseVerificationHeader} */ (
    jspb.Message.getWrapperField(this, session_types_pb.ResponseVerificationHeader, 3));
};


/** @param {?proto.neo.fs.v2.session.ResponseVerificationHeader|undefined} value */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.setVerifyHeader = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.clearVerifyHeader = function() {
  this.setVerifyHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfoResponse.prototype.hasVerifyHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.neo.fs.v2.netmap);
