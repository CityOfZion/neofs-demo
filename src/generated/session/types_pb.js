/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// @ts-nocheck
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var refs_types_pb = require('../refs/types_pb.js');
goog.object.extend(proto, refs_types_pb);
var acl_types_pb = require('../acl/types_pb.js');
goog.object.extend(proto, acl_types_pb);
goog.exportSymbol('proto.neo.fs.v2.session.ContainerSessionContext', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.ContainerSessionContext.Verb', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.ObjectSessionContext', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.ObjectSessionContext.Verb', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.RequestMetaHeader', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.RequestVerificationHeader', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.ResponseMetaHeader', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.ResponseVerificationHeader', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.SessionToken', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.SessionToken.Body', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime', null, global);
goog.exportSymbol('proto.neo.fs.v2.session.XHeader', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.ObjectSessionContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.session.ObjectSessionContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.ObjectSessionContext.displayName = 'proto.neo.fs.v2.session.ObjectSessionContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.ContainerSessionContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.session.ContainerSessionContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.ContainerSessionContext.displayName = 'proto.neo.fs.v2.session.ContainerSessionContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.SessionToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.session.SessionToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.SessionToken.displayName = 'proto.neo.fs.v2.session.SessionToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.SessionToken.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.neo.fs.v2.session.SessionToken.Body.oneofGroups_);
};
goog.inherits(proto.neo.fs.v2.session.SessionToken.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.SessionToken.Body.displayName = 'proto.neo.fs.v2.session.SessionToken.Body';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.displayName = 'proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.XHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.session.XHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.XHeader.displayName = 'proto.neo.fs.v2.session.XHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.RequestMetaHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.session.RequestMetaHeader.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.session.RequestMetaHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.RequestMetaHeader.displayName = 'proto.neo.fs.v2.session.RequestMetaHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.ResponseMetaHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.session.ResponseMetaHeader.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.session.ResponseMetaHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.ResponseMetaHeader.displayName = 'proto.neo.fs.v2.session.ResponseMetaHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.RequestVerificationHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.session.RequestVerificationHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.RequestVerificationHeader.displayName = 'proto.neo.fs.v2.session.RequestVerificationHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.session.ResponseVerificationHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.session.ResponseVerificationHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.session.ResponseVerificationHeader.displayName = 'proto.neo.fs.v2.session.ResponseVerificationHeader';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.ObjectSessionContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.ObjectSessionContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ObjectSessionContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    verb: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: (f = msg.getAddress()) && refs_types_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.ObjectSessionContext}
 */
proto.neo.fs.v2.session.ObjectSessionContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.ObjectSessionContext;
  return proto.neo.fs.v2.session.ObjectSessionContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.ObjectSessionContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.ObjectSessionContext}
 */
proto.neo.fs.v2.session.ObjectSessionContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.neo.fs.v2.session.ObjectSessionContext.Verb} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 2:
      var value = new refs_types_pb.Address;
      reader.readMessage(value,refs_types_pb.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.ObjectSessionContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.ObjectSessionContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ObjectSessionContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.neo.fs.v2.session.ObjectSessionContext.Verb = {
  VERB_UNSPECIFIED: 0,
  PUT: 1,
  GET: 2,
  HEAD: 3,
  SEARCH: 4,
  DELETE: 5,
  RANGE: 6,
  RANGEHASH: 7
};

/**
 * optional Verb verb = 1;
 * @return {!proto.neo.fs.v2.session.ObjectSessionContext.Verb}
 */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.getVerb = function() {
  return /** @type {!proto.neo.fs.v2.session.ObjectSessionContext.Verb} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.neo.fs.v2.session.ObjectSessionContext.Verb} value */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.setVerb = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional neo.fs.v2.refs.Address address = 2;
 * @return {?proto.neo.fs.v2.refs.Address}
 */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.getAddress = function() {
  return /** @type{?proto.neo.fs.v2.refs.Address} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Address, 2));
};


/** @param {?proto.neo.fs.v2.refs.Address|undefined} value */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.setAddress = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.clearAddress = function() {
  this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ObjectSessionContext.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.ContainerSessionContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.ContainerSessionContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ContainerSessionContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    verb: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wildcard: jspb.Message.getFieldWithDefault(msg, 2, false),
    containerId: (f = msg.getContainerId()) && refs_types_pb.ContainerID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.ContainerSessionContext}
 */
proto.neo.fs.v2.session.ContainerSessionContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.ContainerSessionContext;
  return proto.neo.fs.v2.session.ContainerSessionContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.ContainerSessionContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.ContainerSessionContext}
 */
proto.neo.fs.v2.session.ContainerSessionContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.neo.fs.v2.session.ContainerSessionContext.Verb} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWildcard(value);
      break;
    case 3:
      var value = new refs_types_pb.ContainerID;
      reader.readMessage(value,refs_types_pb.ContainerID.deserializeBinaryFromReader);
      msg.setContainerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.ContainerSessionContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.ContainerSessionContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ContainerSessionContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWildcard();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getContainerId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.ContainerID.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.neo.fs.v2.session.ContainerSessionContext.Verb = {
  VERB_UNSPECIFIED: 0,
  PUT: 1,
  DELETE: 2,
  SETEACL: 3
};

/**
 * optional Verb verb = 1;
 * @return {!proto.neo.fs.v2.session.ContainerSessionContext.Verb}
 */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.getVerb = function() {
  return /** @type {!proto.neo.fs.v2.session.ContainerSessionContext.Verb} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.neo.fs.v2.session.ContainerSessionContext.Verb} value */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.setVerb = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool wildcard = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.getWildcard = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.setWildcard = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional neo.fs.v2.refs.ContainerID container_id = 3;
 * @return {?proto.neo.fs.v2.refs.ContainerID}
 */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.getContainerId = function() {
  return /** @type{?proto.neo.fs.v2.refs.ContainerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ContainerID, 3));
};


/** @param {?proto.neo.fs.v2.refs.ContainerID|undefined} value */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.setContainerId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.clearContainerId = function() {
  this.setContainerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ContainerSessionContext.prototype.hasContainerId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.SessionToken.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.SessionToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.SessionToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.SessionToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.neo.fs.v2.session.SessionToken.Body.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && refs_types_pb.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.SessionToken}
 */
proto.neo.fs.v2.session.SessionToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.SessionToken;
  return proto.neo.fs.v2.session.SessionToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.SessionToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.SessionToken}
 */
proto.neo.fs.v2.session.SessionToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.session.SessionToken.Body;
      reader.readMessage(value,proto.neo.fs.v2.session.SessionToken.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.SessionToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.SessionToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.SessionToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.SessionToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neo.fs.v2.session.SessionToken.Body.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.neo.fs.v2.session.SessionToken.Body.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.neo.fs.v2.session.SessionToken.Body.ContextCase = {
  CONTEXT_NOT_SET: 0,
  OBJECT: 5,
  CONTAINER: 6
};

/**
 * @return {proto.neo.fs.v2.session.SessionToken.Body.ContextCase}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getContextCase = function() {
  return /** @type {proto.neo.fs.v2.session.SessionToken.Body.ContextCase} */(jspb.Message.computeOneofCase(this, proto.neo.fs.v2.session.SessionToken.Body.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.SessionToken.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.SessionToken.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.SessionToken.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    ownerId: (f = msg.getOwnerId()) && refs_types_pb.OwnerID.toObject(includeInstance, f),
    lifetime: (f = msg.getLifetime()) && proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.toObject(includeInstance, f),
    sessionKey: msg.getSessionKey_asB64(),
    object: (f = msg.getObject()) && proto.neo.fs.v2.session.ObjectSessionContext.toObject(includeInstance, f),
    container: (f = msg.getContainer()) && proto.neo.fs.v2.session.ContainerSessionContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.SessionToken.Body}
 */
proto.neo.fs.v2.session.SessionToken.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.SessionToken.Body;
  return proto.neo.fs.v2.session.SessionToken.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.SessionToken.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.SessionToken.Body}
 */
proto.neo.fs.v2.session.SessionToken.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new refs_types_pb.OwnerID;
      reader.readMessage(value,refs_types_pb.OwnerID.deserializeBinaryFromReader);
      msg.setOwnerId(value);
      break;
    case 3:
      var value = new proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime;
      reader.readMessage(value,proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.deserializeBinaryFromReader);
      msg.setLifetime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionKey(value);
      break;
    case 5:
      var value = new proto.neo.fs.v2.session.ObjectSessionContext;
      reader.readMessage(value,proto.neo.fs.v2.session.ObjectSessionContext.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 6:
      var value = new proto.neo.fs.v2.session.ContainerSessionContext;
      reader.readMessage(value,proto.neo.fs.v2.session.ContainerSessionContext.deserializeBinaryFromReader);
      msg.setContainer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.SessionToken.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.SessionToken.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.SessionToken.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOwnerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.OwnerID.serializeBinaryToWriter
    );
  }
  f = message.getLifetime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.serializeBinaryToWriter
    );
  }
  f = message.getSessionKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.neo.fs.v2.session.ObjectSessionContext.serializeBinaryToWriter
    );
  }
  f = message.getContainer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.neo.fs.v2.session.ContainerSessionContext.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.toObject = function(includeInstance, msg) {
  var f, obj = {
    exp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nbf: jspb.Message.getFieldWithDefault(msg, 2, 0),
    iat: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime}
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime;
  return proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime}
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNbf(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNbf();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIat();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 exp = 1;
 * @return {number}
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.setExp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nbf = 2;
 * @return {number}
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.getNbf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.setNbf = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 iat = 3;
 * @return {number}
 */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.getIat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime.prototype.setIat = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.neo.fs.v2.session.SessionToken.Body.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional neo.fs.v2.refs.OwnerID owner_id = 2;
 * @return {?proto.neo.fs.v2.refs.OwnerID}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getOwnerId = function() {
  return /** @type{?proto.neo.fs.v2.refs.OwnerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.OwnerID, 2));
};


/** @param {?proto.neo.fs.v2.refs.OwnerID|undefined} value */
proto.neo.fs.v2.session.SessionToken.Body.prototype.setOwnerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.clearOwnerId = function() {
  this.setOwnerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.hasOwnerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TokenLifetime lifetime = 3;
 * @return {?proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getLifetime = function() {
  return /** @type{?proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime, 3));
};


/** @param {?proto.neo.fs.v2.session.SessionToken.Body.TokenLifetime|undefined} value */
proto.neo.fs.v2.session.SessionToken.Body.prototype.setLifetime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.clearLifetime = function() {
  this.setLifetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.hasLifetime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes session_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getSessionKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes session_key = 4;
 * This is a type-conversion wrapper around `getSessionKey()`
 * @return {string}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getSessionKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionKey()));
};


/**
 * optional bytes session_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionKey()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getSessionKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.neo.fs.v2.session.SessionToken.Body.prototype.setSessionKey = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional ObjectSessionContext object = 5;
 * @return {?proto.neo.fs.v2.session.ObjectSessionContext}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getObject = function() {
  return /** @type{?proto.neo.fs.v2.session.ObjectSessionContext} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.ObjectSessionContext, 5));
};


/** @param {?proto.neo.fs.v2.session.ObjectSessionContext|undefined} value */
proto.neo.fs.v2.session.SessionToken.Body.prototype.setObject = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.neo.fs.v2.session.SessionToken.Body.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.clearObject = function() {
  this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.hasObject = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ContainerSessionContext container = 6;
 * @return {?proto.neo.fs.v2.session.ContainerSessionContext}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.getContainer = function() {
  return /** @type{?proto.neo.fs.v2.session.ContainerSessionContext} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.ContainerSessionContext, 6));
};


/** @param {?proto.neo.fs.v2.session.ContainerSessionContext|undefined} value */
proto.neo.fs.v2.session.SessionToken.Body.prototype.setContainer = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.neo.fs.v2.session.SessionToken.Body.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.clearContainer = function() {
  this.setContainer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.SessionToken.Body.prototype.hasContainer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Body body = 1;
 * @return {?proto.neo.fs.v2.session.SessionToken.Body}
 */
proto.neo.fs.v2.session.SessionToken.prototype.getBody = function() {
  return /** @type{?proto.neo.fs.v2.session.SessionToken.Body} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.SessionToken.Body, 1));
};


/** @param {?proto.neo.fs.v2.session.SessionToken.Body|undefined} value */
proto.neo.fs.v2.session.SessionToken.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.SessionToken.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.SessionToken.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.Signature signature = 2;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.session.SessionToken.prototype.getSignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 2));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.session.SessionToken.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.SessionToken.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.SessionToken.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.XHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.XHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.XHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.XHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.XHeader}
 */
proto.neo.fs.v2.session.XHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.XHeader;
  return proto.neo.fs.v2.session.XHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.XHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.XHeader}
 */
proto.neo.fs.v2.session.XHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.XHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.XHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.XHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.XHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.neo.fs.v2.session.XHeader.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.neo.fs.v2.session.XHeader.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.neo.fs.v2.session.XHeader.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.neo.fs.v2.session.XHeader.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.session.RequestMetaHeader.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.RequestMetaHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.RequestMetaHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.RequestMetaHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 3, 0),
    xHeadersList: jspb.Message.toObjectList(msg.getXHeadersList(),
    proto.neo.fs.v2.session.XHeader.toObject, includeInstance),
    sessionToken: (f = msg.getSessionToken()) && proto.neo.fs.v2.session.SessionToken.toObject(includeInstance, f),
    bearerToken: (f = msg.getBearerToken()) && acl_types_pb.BearerToken.toObject(includeInstance, f),
    origin: (f = msg.getOrigin()) && proto.neo.fs.v2.session.RequestMetaHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.RequestMetaHeader}
 */
proto.neo.fs.v2.session.RequestMetaHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.RequestMetaHeader;
  return proto.neo.fs.v2.session.RequestMetaHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.RequestMetaHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.RequestMetaHeader}
 */
proto.neo.fs.v2.session.RequestMetaHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.session.XHeader;
      reader.readMessage(value,proto.neo.fs.v2.session.XHeader.deserializeBinaryFromReader);
      msg.addXHeaders(value);
      break;
    case 5:
      var value = new proto.neo.fs.v2.session.SessionToken;
      reader.readMessage(value,proto.neo.fs.v2.session.SessionToken.deserializeBinaryFromReader);
      msg.setSessionToken(value);
      break;
    case 6:
      var value = new acl_types_pb.BearerToken;
      reader.readMessage(value,acl_types_pb.BearerToken.deserializeBinaryFromReader);
      msg.setBearerToken(value);
      break;
    case 7:
      var value = new proto.neo.fs.v2.session.RequestMetaHeader;
      reader.readMessage(value,proto.neo.fs.v2.session.RequestMetaHeader.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.RequestMetaHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.RequestMetaHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.RequestMetaHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getXHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.neo.fs.v2.session.XHeader.serializeBinaryToWriter
    );
  }
  f = message.getSessionToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.neo.fs.v2.session.SessionToken.serializeBinaryToWriter
    );
  }
  f = message.getBearerToken();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      acl_types_pb.BearerToken.serializeBinaryToWriter
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.neo.fs.v2.session.RequestMetaHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {?proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.getVersion = function() {
  return /** @type{?proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {?proto.neo.fs.v2.refs.Version|undefined} value */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.setEpoch = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 ttl = 3;
 * @return {number}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.setTtl = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated XHeader x_headers = 4;
 * @return {!Array<!proto.neo.fs.v2.session.XHeader>}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.getXHeadersList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.session.XHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.session.XHeader, 4));
};


/** @param {!Array<!proto.neo.fs.v2.session.XHeader>} value */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.setXHeadersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.neo.fs.v2.session.XHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.session.XHeader}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.addXHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.neo.fs.v2.session.XHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.clearXHeadersList = function() {
  this.setXHeadersList([]);
};


/**
 * optional SessionToken session_token = 5;
 * @return {?proto.neo.fs.v2.session.SessionToken}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.getSessionToken = function() {
  return /** @type{?proto.neo.fs.v2.session.SessionToken} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.SessionToken, 5));
};


/** @param {?proto.neo.fs.v2.session.SessionToken|undefined} value */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.setSessionToken = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.clearSessionToken = function() {
  this.setSessionToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.hasSessionToken = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional neo.fs.v2.acl.BearerToken bearer_token = 6;
 * @return {?proto.neo.fs.v2.acl.BearerToken}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.getBearerToken = function() {
  return /** @type{?proto.neo.fs.v2.acl.BearerToken} */ (
    jspb.Message.getWrapperField(this, acl_types_pb.BearerToken, 6));
};


/** @param {?proto.neo.fs.v2.acl.BearerToken|undefined} value */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.setBearerToken = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.clearBearerToken = function() {
  this.setBearerToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.hasBearerToken = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestMetaHeader origin = 7;
 * @return {?proto.neo.fs.v2.session.RequestMetaHeader}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.getOrigin = function() {
  return /** @type{?proto.neo.fs.v2.session.RequestMetaHeader} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.RequestMetaHeader, 7));
};


/** @param {?proto.neo.fs.v2.session.RequestMetaHeader|undefined} value */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestMetaHeader.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.session.ResponseMetaHeader.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.ResponseMetaHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.ResponseMetaHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ResponseMetaHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 3, 0),
    xHeadersList: jspb.Message.toObjectList(msg.getXHeadersList(),
    proto.neo.fs.v2.session.XHeader.toObject, includeInstance),
    origin: (f = msg.getOrigin()) && proto.neo.fs.v2.session.ResponseMetaHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.ResponseMetaHeader}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.ResponseMetaHeader;
  return proto.neo.fs.v2.session.ResponseMetaHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.ResponseMetaHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.ResponseMetaHeader}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.session.XHeader;
      reader.readMessage(value,proto.neo.fs.v2.session.XHeader.deserializeBinaryFromReader);
      msg.addXHeaders(value);
      break;
    case 5:
      var value = new proto.neo.fs.v2.session.ResponseMetaHeader;
      reader.readMessage(value,proto.neo.fs.v2.session.ResponseMetaHeader.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.ResponseMetaHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.ResponseMetaHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ResponseMetaHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getXHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.neo.fs.v2.session.XHeader.serializeBinaryToWriter
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.neo.fs.v2.session.ResponseMetaHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {?proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.getVersion = function() {
  return /** @type{?proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {?proto.neo.fs.v2.refs.Version|undefined} value */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.setEpoch = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 ttl = 3;
 * @return {number}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.setTtl = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated XHeader x_headers = 4;
 * @return {!Array<!proto.neo.fs.v2.session.XHeader>}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.getXHeadersList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.session.XHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.session.XHeader, 4));
};


/** @param {!Array<!proto.neo.fs.v2.session.XHeader>} value */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.setXHeadersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.neo.fs.v2.session.XHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.session.XHeader}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.addXHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.neo.fs.v2.session.XHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.clearXHeadersList = function() {
  this.setXHeadersList([]);
};


/**
 * optional ResponseMetaHeader origin = 5;
 * @return {?proto.neo.fs.v2.session.ResponseMetaHeader}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.getOrigin = function() {
  return /** @type{?proto.neo.fs.v2.session.ResponseMetaHeader} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.ResponseMetaHeader, 5));
};


/** @param {?proto.neo.fs.v2.session.ResponseMetaHeader|undefined} value */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ResponseMetaHeader.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.RequestVerificationHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.RequestVerificationHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.RequestVerificationHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    bodySignature: (f = msg.getBodySignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    metaSignature: (f = msg.getMetaSignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    originSignature: (f = msg.getOriginSignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    origin: (f = msg.getOrigin()) && proto.neo.fs.v2.session.RequestVerificationHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.RequestVerificationHeader}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.RequestVerificationHeader;
  return proto.neo.fs.v2.session.RequestVerificationHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.RequestVerificationHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.RequestVerificationHeader}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setBodySignature(value);
      break;
    case 2:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setMetaSignature(value);
      break;
    case 3:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setOriginSignature(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.session.RequestVerificationHeader;
      reader.readMessage(value,proto.neo.fs.v2.session.RequestVerificationHeader.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.RequestVerificationHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.RequestVerificationHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.RequestVerificationHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBodySignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getMetaSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getOriginSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.neo.fs.v2.session.RequestVerificationHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional neo.fs.v2.refs.Signature body_signature = 1;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.getBodySignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 1));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.setBodySignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.clearBodySignature = function() {
  this.setBodySignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.hasBodySignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.Signature meta_signature = 2;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.getMetaSignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 2));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.setMetaSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.clearMetaSignature = function() {
  this.setMetaSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.hasMetaSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.refs.Signature origin_signature = 3;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.getOriginSignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 3));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.setOriginSignature = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.clearOriginSignature = function() {
  this.setOriginSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.hasOriginSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestVerificationHeader origin = 4;
 * @return {?proto.neo.fs.v2.session.RequestVerificationHeader}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.getOrigin = function() {
  return /** @type{?proto.neo.fs.v2.session.RequestVerificationHeader} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.RequestVerificationHeader, 4));
};


/** @param {?proto.neo.fs.v2.session.RequestVerificationHeader|undefined} value */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.RequestVerificationHeader.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.session.ResponseVerificationHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.session.ResponseVerificationHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    bodySignature: (f = msg.getBodySignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    metaSignature: (f = msg.getMetaSignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    originSignature: (f = msg.getOriginSignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    origin: (f = msg.getOrigin()) && proto.neo.fs.v2.session.ResponseVerificationHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.session.ResponseVerificationHeader}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.session.ResponseVerificationHeader;
  return proto.neo.fs.v2.session.ResponseVerificationHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.session.ResponseVerificationHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.session.ResponseVerificationHeader}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setBodySignature(value);
      break;
    case 2:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setMetaSignature(value);
      break;
    case 3:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setOriginSignature(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.session.ResponseVerificationHeader;
      reader.readMessage(value,proto.neo.fs.v2.session.ResponseVerificationHeader.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.session.ResponseVerificationHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.session.ResponseVerificationHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBodySignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getMetaSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getOriginSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.neo.fs.v2.session.ResponseVerificationHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional neo.fs.v2.refs.Signature body_signature = 1;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.getBodySignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 1));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.setBodySignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.clearBodySignature = function() {
  this.setBodySignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.hasBodySignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.Signature meta_signature = 2;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.getMetaSignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 2));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.setMetaSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.clearMetaSignature = function() {
  this.setMetaSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.hasMetaSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.refs.Signature origin_signature = 3;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.getOriginSignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 3));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.setOriginSignature = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.clearOriginSignature = function() {
  this.setOriginSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.hasOriginSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResponseVerificationHeader origin = 4;
 * @return {?proto.neo.fs.v2.session.ResponseVerificationHeader}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.getOrigin = function() {
  return /** @type{?proto.neo.fs.v2.session.ResponseVerificationHeader} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.session.ResponseVerificationHeader, 4));
};


/** @param {?proto.neo.fs.v2.session.ResponseVerificationHeader|undefined} value */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.session.ResponseVerificationHeader.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.neo.fs.v2.session);
