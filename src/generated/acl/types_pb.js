/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// @ts-nocheck
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var refs_types_pb = require('../refs/types_pb.js');
goog.object.extend(proto, refs_types_pb);
goog.exportSymbol('proto.neo.fs.v2.acl.Action', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.BearerToken', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.BearerToken.Body', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.EACLRecord', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.EACLRecord.Filter', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.EACLRecord.Target', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.EACLTable', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.HeaderType', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.MatchType', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.Operation', null, global);
goog.exportSymbol('proto.neo.fs.v2.acl.Role', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.acl.EACLRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.acl.EACLRecord.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.acl.EACLRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.acl.EACLRecord.displayName = 'proto.neo.fs.v2.acl.EACLRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.acl.EACLRecord.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.acl.EACLRecord.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.acl.EACLRecord.Filter.displayName = 'proto.neo.fs.v2.acl.EACLRecord.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.acl.EACLRecord.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.acl.EACLRecord.Target.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.acl.EACLRecord.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.acl.EACLRecord.Target.displayName = 'proto.neo.fs.v2.acl.EACLRecord.Target';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.acl.EACLTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.acl.EACLTable.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.acl.EACLTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.acl.EACLTable.displayName = 'proto.neo.fs.v2.acl.EACLTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.acl.BearerToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.acl.BearerToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.acl.BearerToken.displayName = 'proto.neo.fs.v2.acl.BearerToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.acl.BearerToken.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.acl.BearerToken.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.acl.BearerToken.Body.displayName = 'proto.neo.fs.v2.acl.BearerToken.Body';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.displayName = 'proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.acl.EACLRecord.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.acl.EACLRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.acl.EACLRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.neo.fs.v2.acl.EACLRecord.Filter.toObject, includeInstance),
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.neo.fs.v2.acl.EACLRecord.Target.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.acl.EACLRecord}
 */
proto.neo.fs.v2.acl.EACLRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.acl.EACLRecord;
  return proto.neo.fs.v2.acl.EACLRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.acl.EACLRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.acl.EACLRecord}
 */
proto.neo.fs.v2.acl.EACLRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.neo.fs.v2.acl.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {!proto.neo.fs.v2.acl.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.neo.fs.v2.acl.EACLRecord.Filter;
      reader.readMessage(value,proto.neo.fs.v2.acl.EACLRecord.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.acl.EACLRecord.Target;
      reader.readMessage(value,proto.neo.fs.v2.acl.EACLRecord.Target.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.acl.EACLRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.acl.EACLRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.neo.fs.v2.acl.EACLRecord.Filter.serializeBinaryToWriter
    );
  }
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.neo.fs.v2.acl.EACLRecord.Target.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.acl.EACLRecord.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    headerType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    matchType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.acl.EACLRecord.Filter}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.acl.EACLRecord.Filter;
  return proto.neo.fs.v2.acl.EACLRecord.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.acl.EACLRecord.Filter}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.neo.fs.v2.acl.HeaderType} */ (reader.readEnum());
      msg.setHeaderType(value);
      break;
    case 2:
      var value = /** @type {!proto.neo.fs.v2.acl.MatchType} */ (reader.readEnum());
      msg.setMatchType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.acl.EACLRecord.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeaderType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMatchType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional HeaderType header_type = 1;
 * @return {!proto.neo.fs.v2.acl.HeaderType}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.getHeaderType = function() {
  return /** @type {!proto.neo.fs.v2.acl.HeaderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.neo.fs.v2.acl.HeaderType} value */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.setHeaderType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MatchType match_type = 2;
 * @return {!proto.neo.fs.v2.acl.MatchType}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.getMatchType = function() {
  return /** @type {!proto.neo.fs.v2.acl.MatchType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.neo.fs.v2.acl.MatchType} value */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.setMatchType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.neo.fs.v2.acl.EACLRecord.Filter.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.acl.EACLRecord.Target.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.acl.EACLRecord.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLRecord.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keysList: msg.getKeysList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.acl.EACLRecord.Target}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.acl.EACLRecord.Target;
  return proto.neo.fs.v2.acl.EACLRecord.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.acl.EACLRecord.Target}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.neo.fs.v2.acl.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.acl.EACLRecord.Target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLRecord.Target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional Role role = 1;
 * @return {!proto.neo.fs.v2.acl.Role}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.getRole = function() {
  return /** @type {!proto.neo.fs.v2.acl.Role} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.neo.fs.v2.acl.Role} value */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.setRole = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated bytes keys = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.getKeysList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes keys = 2;
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<string>}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.getKeysList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeysList()));
};


/**
 * repeated bytes keys = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.getKeysList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeysList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.addKeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neo.fs.v2.acl.EACLRecord.Target.prototype.clearKeysList = function() {
  this.setKeysList([]);
};


/**
 * optional Operation operation = 1;
 * @return {!proto.neo.fs.v2.acl.Operation}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.getOperation = function() {
  return /** @type {!proto.neo.fs.v2.acl.Operation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.neo.fs.v2.acl.Operation} value */
proto.neo.fs.v2.acl.EACLRecord.prototype.setOperation = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Action action = 2;
 * @return {!proto.neo.fs.v2.acl.Action}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.getAction = function() {
  return /** @type {!proto.neo.fs.v2.acl.Action} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.neo.fs.v2.acl.Action} value */
proto.neo.fs.v2.acl.EACLRecord.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Filter filters = 3;
 * @return {!Array<!proto.neo.fs.v2.acl.EACLRecord.Filter>}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.acl.EACLRecord.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.acl.EACLRecord.Filter, 3));
};


/** @param {!Array<!proto.neo.fs.v2.acl.EACLRecord.Filter>} value */
proto.neo.fs.v2.acl.EACLRecord.prototype.setFiltersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.acl.EACLRecord.Filter}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.neo.fs.v2.acl.EACLRecord.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.clearFiltersList = function() {
  this.setFiltersList([]);
};


/**
 * repeated Target targets = 4;
 * @return {!Array<!proto.neo.fs.v2.acl.EACLRecord.Target>}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.getTargetsList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.acl.EACLRecord.Target>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.acl.EACLRecord.Target, 4));
};


/** @param {!Array<!proto.neo.fs.v2.acl.EACLRecord.Target>} value */
proto.neo.fs.v2.acl.EACLRecord.prototype.setTargetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.neo.fs.v2.acl.EACLRecord.Target=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.acl.EACLRecord.Target}
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.neo.fs.v2.acl.EACLRecord.Target, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neo.fs.v2.acl.EACLRecord.prototype.clearTargetsList = function() {
  this.setTargetsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.acl.EACLTable.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.acl.EACLTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.acl.EACLTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    containerId: (f = msg.getContainerId()) && refs_types_pb.ContainerID.toObject(includeInstance, f),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.neo.fs.v2.acl.EACLRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.acl.EACLTable}
 */
proto.neo.fs.v2.acl.EACLTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.acl.EACLTable;
  return proto.neo.fs.v2.acl.EACLTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.acl.EACLTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.acl.EACLTable}
 */
proto.neo.fs.v2.acl.EACLTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = new refs_types_pb.ContainerID;
      reader.readMessage(value,refs_types_pb.ContainerID.deserializeBinaryFromReader);
      msg.setContainerId(value);
      break;
    case 3:
      var value = new proto.neo.fs.v2.acl.EACLRecord;
      reader.readMessage(value,proto.neo.fs.v2.acl.EACLRecord.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.acl.EACLTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.acl.EACLTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.EACLTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getContainerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.ContainerID.serializeBinaryToWriter
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.neo.fs.v2.acl.EACLRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {?proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.getVersion = function() {
  return /** @type{?proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {?proto.neo.fs.v2.refs.Version|undefined} value */
proto.neo.fs.v2.acl.EACLTable.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.acl.EACLTable.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.ContainerID container_id = 2;
 * @return {?proto.neo.fs.v2.refs.ContainerID}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.getContainerId = function() {
  return /** @type{?proto.neo.fs.v2.refs.ContainerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ContainerID, 2));
};


/** @param {?proto.neo.fs.v2.refs.ContainerID|undefined} value */
proto.neo.fs.v2.acl.EACLTable.prototype.setContainerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.acl.EACLTable.prototype.clearContainerId = function() {
  this.setContainerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.hasContainerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated EACLRecord records = 3;
 * @return {!Array<!proto.neo.fs.v2.acl.EACLRecord>}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.acl.EACLRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.acl.EACLRecord, 3));
};


/** @param {!Array<!proto.neo.fs.v2.acl.EACLRecord>} value */
proto.neo.fs.v2.acl.EACLTable.prototype.setRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.neo.fs.v2.acl.EACLRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.acl.EACLRecord}
 */
proto.neo.fs.v2.acl.EACLTable.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.neo.fs.v2.acl.EACLRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neo.fs.v2.acl.EACLTable.prototype.clearRecordsList = function() {
  this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.acl.BearerToken.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.acl.BearerToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.acl.BearerToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.BearerToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.neo.fs.v2.acl.BearerToken.Body.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && refs_types_pb.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.acl.BearerToken}
 */
proto.neo.fs.v2.acl.BearerToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.acl.BearerToken;
  return proto.neo.fs.v2.acl.BearerToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.acl.BearerToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.acl.BearerToken}
 */
proto.neo.fs.v2.acl.BearerToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.acl.BearerToken.Body;
      reader.readMessage(value,proto.neo.fs.v2.acl.BearerToken.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.acl.BearerToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.acl.BearerToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.acl.BearerToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.BearerToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neo.fs.v2.acl.BearerToken.Body.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.acl.BearerToken.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.acl.BearerToken.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.BearerToken.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    eaclTable: (f = msg.getEaclTable()) && proto.neo.fs.v2.acl.EACLTable.toObject(includeInstance, f),
    ownerId: (f = msg.getOwnerId()) && refs_types_pb.OwnerID.toObject(includeInstance, f),
    lifetime: (f = msg.getLifetime()) && proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.acl.BearerToken.Body}
 */
proto.neo.fs.v2.acl.BearerToken.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.acl.BearerToken.Body;
  return proto.neo.fs.v2.acl.BearerToken.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.acl.BearerToken.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.acl.BearerToken.Body}
 */
proto.neo.fs.v2.acl.BearerToken.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.acl.EACLTable;
      reader.readMessage(value,proto.neo.fs.v2.acl.EACLTable.deserializeBinaryFromReader);
      msg.setEaclTable(value);
      break;
    case 2:
      var value = new refs_types_pb.OwnerID;
      reader.readMessage(value,refs_types_pb.OwnerID.deserializeBinaryFromReader);
      msg.setOwnerId(value);
      break;
    case 3:
      var value = new proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime;
      reader.readMessage(value,proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.deserializeBinaryFromReader);
      msg.setLifetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.acl.BearerToken.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.acl.BearerToken.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.BearerToken.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEaclTable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neo.fs.v2.acl.EACLTable.serializeBinaryToWriter
    );
  }
  f = message.getOwnerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.OwnerID.serializeBinaryToWriter
    );
  }
  f = message.getLifetime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.toObject = function(includeInstance, msg) {
  var f, obj = {
    exp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nbf: jspb.Message.getFieldWithDefault(msg, 2, 0),
    iat: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime}
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime;
  return proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime}
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNbf(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNbf();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIat();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 exp = 1;
 * @return {number}
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.setExp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nbf = 2;
 * @return {number}
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.getNbf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.setNbf = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 iat = 3;
 * @return {number}
 */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.getIat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime.prototype.setIat = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional EACLTable eacl_table = 1;
 * @return {?proto.neo.fs.v2.acl.EACLTable}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.getEaclTable = function() {
  return /** @type{?proto.neo.fs.v2.acl.EACLTable} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.acl.EACLTable, 1));
};


/** @param {?proto.neo.fs.v2.acl.EACLTable|undefined} value */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.setEaclTable = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.clearEaclTable = function() {
  this.setEaclTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.hasEaclTable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.OwnerID owner_id = 2;
 * @return {?proto.neo.fs.v2.refs.OwnerID}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.getOwnerId = function() {
  return /** @type{?proto.neo.fs.v2.refs.OwnerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.OwnerID, 2));
};


/** @param {?proto.neo.fs.v2.refs.OwnerID|undefined} value */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.setOwnerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.clearOwnerId = function() {
  this.setOwnerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.hasOwnerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TokenLifetime lifetime = 3;
 * @return {?proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.getLifetime = function() {
  return /** @type{?proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime, 3));
};


/** @param {?proto.neo.fs.v2.acl.BearerToken.Body.TokenLifetime|undefined} value */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.setLifetime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.clearLifetime = function() {
  this.setLifetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.acl.BearerToken.Body.prototype.hasLifetime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Body body = 1;
 * @return {?proto.neo.fs.v2.acl.BearerToken.Body}
 */
proto.neo.fs.v2.acl.BearerToken.prototype.getBody = function() {
  return /** @type{?proto.neo.fs.v2.acl.BearerToken.Body} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.acl.BearerToken.Body, 1));
};


/** @param {?proto.neo.fs.v2.acl.BearerToken.Body|undefined} value */
proto.neo.fs.v2.acl.BearerToken.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.acl.BearerToken.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.acl.BearerToken.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.Signature signature = 2;
 * @return {?proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.acl.BearerToken.prototype.getSignature = function() {
  return /** @type{?proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 2));
};


/** @param {?proto.neo.fs.v2.refs.Signature|undefined} value */
proto.neo.fs.v2.acl.BearerToken.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.acl.BearerToken.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.acl.BearerToken.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.neo.fs.v2.acl.Role = {
  ROLE_UNSPECIFIED: 0,
  USER: 1,
  SYSTEM: 2,
  OTHERS: 3
};

/**
 * @enum {number}
 */
proto.neo.fs.v2.acl.MatchType = {
  MATCH_TYPE_UNSPECIFIED: 0,
  STRING_EQUAL: 1,
  STRING_NOT_EQUAL: 2
};

/**
 * @enum {number}
 */
proto.neo.fs.v2.acl.Operation = {
  OPERATION_UNSPECIFIED: 0,
  GET: 1,
  HEAD: 2,
  PUT: 3,
  DELETE: 4,
  SEARCH: 5,
  GETRANGE: 6,
  GETRANGEHASH: 7
};

/**
 * @enum {number}
 */
proto.neo.fs.v2.acl.Action = {
  ACTION_UNSPECIFIED: 0,
  ALLOW: 1,
  DENY: 2
};

/**
 * @enum {number}
 */
proto.neo.fs.v2.acl.HeaderType = {
  HEADER_UNSPECIFIED: 0,
  REQUEST: 1,
  OBJECT: 2
};

goog.object.extend(exports, proto.neo.fs.v2.acl);
