/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// @ts-nocheck
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var netmap_types_pb = require('../netmap/types_pb.js');
goog.object.extend(proto, netmap_types_pb);
var refs_types_pb = require('../refs/types_pb.js');
goog.object.extend(proto, refs_types_pb);
goog.exportSymbol('proto.neo.fs.v2.container.Container', null, global);
goog.exportSymbol('proto.neo.fs.v2.container.Container.Attribute', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.container.Container = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.container.Container.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.container.Container, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.container.Container.displayName = 'proto.neo.fs.v2.container.Container';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.container.Container.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.container.Container.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.container.Container.Attribute.displayName = 'proto.neo.fs.v2.container.Container.Attribute';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.container.Container.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.container.Container.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.container.Container.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.container.Container} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.container.Container.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    ownerId: (f = msg.getOwnerId()) && refs_types_pb.OwnerID.toObject(includeInstance, f),
    nonce: msg.getNonce_asB64(),
    basicAcl: jspb.Message.getFieldWithDefault(msg, 4, 0),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.neo.fs.v2.container.Container.Attribute.toObject, includeInstance),
    placementPolicy: (f = msg.getPlacementPolicy()) && netmap_types_pb.PlacementPolicy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.container.Container}
 */
proto.neo.fs.v2.container.Container.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.container.Container;
  return proto.neo.fs.v2.container.Container.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.container.Container} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.container.Container}
 */
proto.neo.fs.v2.container.Container.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = new refs_types_pb.OwnerID;
      reader.readMessage(value,refs_types_pb.OwnerID.deserializeBinaryFromReader);
      msg.setOwnerId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBasicAcl(value);
      break;
    case 5:
      var value = new proto.neo.fs.v2.container.Container.Attribute;
      reader.readMessage(value,proto.neo.fs.v2.container.Container.Attribute.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 6:
      var value = new netmap_types_pb.PlacementPolicy;
      reader.readMessage(value,netmap_types_pb.PlacementPolicy.deserializeBinaryFromReader);
      msg.setPlacementPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.container.Container.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.container.Container.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.container.Container} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.container.Container.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getOwnerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.OwnerID.serializeBinaryToWriter
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBasicAcl();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.neo.fs.v2.container.Container.Attribute.serializeBinaryToWriter
    );
  }
  f = message.getPlacementPolicy();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      netmap_types_pb.PlacementPolicy.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.container.Container.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.container.Container.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.container.Container.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.container.Container.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.container.Container.Attribute}
 */
proto.neo.fs.v2.container.Container.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.container.Container.Attribute;
  return proto.neo.fs.v2.container.Container.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.container.Container.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.container.Container.Attribute}
 */
proto.neo.fs.v2.container.Container.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.container.Container.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.container.Container.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.container.Container.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.container.Container.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.neo.fs.v2.container.Container.Attribute.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.neo.fs.v2.container.Container.Attribute.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.neo.fs.v2.container.Container.Attribute.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.neo.fs.v2.container.Container.Attribute.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {?proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.container.Container.prototype.getVersion = function() {
  return /** @type{?proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {?proto.neo.fs.v2.refs.Version|undefined} value */
proto.neo.fs.v2.container.Container.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.container.Container.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.container.Container.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.OwnerID owner_id = 2;
 * @return {?proto.neo.fs.v2.refs.OwnerID}
 */
proto.neo.fs.v2.container.Container.prototype.getOwnerId = function() {
  return /** @type{?proto.neo.fs.v2.refs.OwnerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.OwnerID, 2));
};


/** @param {?proto.neo.fs.v2.refs.OwnerID|undefined} value */
proto.neo.fs.v2.container.Container.prototype.setOwnerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.container.Container.prototype.clearOwnerId = function() {
  this.setOwnerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.container.Container.prototype.hasOwnerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes nonce = 3;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.container.Container.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes nonce = 3;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.neo.fs.v2.container.Container.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.container.Container.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.neo.fs.v2.container.Container.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 basic_acl = 4;
 * @return {number}
 */
proto.neo.fs.v2.container.Container.prototype.getBasicAcl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.neo.fs.v2.container.Container.prototype.setBasicAcl = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Attribute attributes = 5;
 * @return {!Array<!proto.neo.fs.v2.container.Container.Attribute>}
 */
proto.neo.fs.v2.container.Container.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.container.Container.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.container.Container.Attribute, 5));
};


/** @param {!Array<!proto.neo.fs.v2.container.Container.Attribute>} value */
proto.neo.fs.v2.container.Container.prototype.setAttributesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.neo.fs.v2.container.Container.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.container.Container.Attribute}
 */
proto.neo.fs.v2.container.Container.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.neo.fs.v2.container.Container.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neo.fs.v2.container.Container.prototype.clearAttributesList = function() {
  this.setAttributesList([]);
};


/**
 * optional neo.fs.v2.netmap.PlacementPolicy placement_policy = 6;
 * @return {?proto.neo.fs.v2.netmap.PlacementPolicy}
 */
proto.neo.fs.v2.container.Container.prototype.getPlacementPolicy = function() {
  return /** @type{?proto.neo.fs.v2.netmap.PlacementPolicy} */ (
    jspb.Message.getWrapperField(this, netmap_types_pb.PlacementPolicy, 6));
};


/** @param {?proto.neo.fs.v2.netmap.PlacementPolicy|undefined} value */
proto.neo.fs.v2.container.Container.prototype.setPlacementPolicy = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neo.fs.v2.container.Container.prototype.clearPlacementPolicy = function() {
  this.setPlacementPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.container.Container.prototype.hasPlacementPolicy = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.neo.fs.v2.container);
